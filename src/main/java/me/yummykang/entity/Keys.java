/*
 * This file is generated by jOOQ.
*/
package me.yummykang.entity;


import javax.annotation.Generated;

import me.yummykang.entity.tables.CheckIn;
import me.yummykang.entity.tables.OauthClientDetails;
import me.yummykang.entity.tables.SchemaVersion;
import me.yummykang.entity.tables.Users;
import me.yummykang.entity.tables.records.CheckInRecord;
import me.yummykang.entity.tables.records.OauthClientDetailsRecord;
import me.yummykang.entity.tables.records.SchemaVersionRecord;
import me.yummykang.entity.tables.records.UsersRecord;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>workkits</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<CheckInRecord, Integer> IDENTITY_CHECK_IN = Identities0.IDENTITY_CHECK_IN;
    public static final Identity<UsersRecord, Integer> IDENTITY_USERS = Identities0.IDENTITY_USERS;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CheckInRecord> KEY_CHECK_IN_PRIMARY = UniqueKeys0.KEY_CHECK_IN_PRIMARY;
    public static final UniqueKey<OauthClientDetailsRecord> KEY_OAUTH_CLIENT_DETAILS_PRIMARY = UniqueKeys0.KEY_OAUTH_CLIENT_DETAILS_PRIMARY;
    public static final UniqueKey<SchemaVersionRecord> KEY_SCHEMA_VERSION_PRIMARY = UniqueKeys0.KEY_SCHEMA_VERSION_PRIMARY;
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<CheckInRecord, Integer> IDENTITY_CHECK_IN = createIdentity(CheckIn.CHECK_IN, CheckIn.CHECK_IN.ID);
        public static Identity<UsersRecord, Integer> IDENTITY_USERS = createIdentity(Users.USERS, Users.USERS.USER_ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<CheckInRecord> KEY_CHECK_IN_PRIMARY = createUniqueKey(CheckIn.CHECK_IN, "KEY_check_in_PRIMARY", CheckIn.CHECK_IN.ID);
        public static final UniqueKey<OauthClientDetailsRecord> KEY_OAUTH_CLIENT_DETAILS_PRIMARY = createUniqueKey(OauthClientDetails.OAUTH_CLIENT_DETAILS, "KEY_oauth_client_details_PRIMARY", OauthClientDetails.OAUTH_CLIENT_DETAILS.CLIENT_ID);
        public static final UniqueKey<SchemaVersionRecord> KEY_SCHEMA_VERSION_PRIMARY = createUniqueKey(SchemaVersion.SCHEMA_VERSION, "KEY_schema_version_PRIMARY", SchemaVersion.SCHEMA_VERSION.VERSION);
        public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = createUniqueKey(Users.USERS, "KEY_users_PRIMARY", Users.USERS.USER_ID);
    }
}
